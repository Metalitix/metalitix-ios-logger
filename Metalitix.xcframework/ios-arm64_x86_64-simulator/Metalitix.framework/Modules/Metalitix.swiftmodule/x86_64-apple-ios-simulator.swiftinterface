// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
// swift-module-flags: -target x86_64-apple-ios14.7-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name Metalitix
import AudioToolbox
import Combine
import CommonCrypto
import CoreGraphics
import DeveloperToolsSupport
import Foundation
import RealityKit
import SceneKit
import Swift
import SwiftUI
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
import os.log
import os
@objc @objcMembers public class MetalitixLogger : ObjectiveC.NSObject {
  public init(apiKey: Swift.String, surveyOptions: Metalitix.SurveyOptions, showDebug: Swift.Bool, clientIPAddress: Swift.String? = nil)
  @objc public func startSession(sceneView: UIKit.UIView)
  @objc public func logEvent(chart: Swift.String, value: Swift.String)
  @objc public func logState(chart: Swift.String, value: Any)
  @objc public func forceSend()
  @objc public func updateSession()
  @objc public func endSession(_ force: Swift.Bool = false)
  @objc public func setInactivityTimeout(_ inactivityTimeout: Foundation.TimeInterval)
  @objc public func setAttribute(chart: Swift.String, value: Any)
  @objc public func removeAttribute(chart: Swift.String)
  @objc public func showSurvey()
  @objc public func addInactivityListener(_ listener: @escaping () -> ())
  @objc public func clearInactivityListeners()
  @objc public func pauseSession()
  @objc public func resumeSession()
  @objc deinit
}
public struct SurveyOptions {
  public init(surveyLogo: Swift.String, surveyBackgroundColor: Swift.String, surveyTextColor: Swift.String, surveyButtonColor: Swift.String, surveyButtonTextColor: Swift.String)
}
public enum MTXUserInteractionType : Swift.Codable {
  case keyDown
  case keyPress
  case keyUp
  case mouseEnter
  case mouseLeave
  case mouseOver
  case mouseOut
  case mouseDown
  case mouseUp
  case mouseMove
  case mousePress
  case touchTap
  case touchStart
  case touchMove
  case touchEnd
  case zoomStart
  case zoomUpdate
  case zoomEnd
  case state
  case custom
  public func encode(to encoder: any Swift.Encoder) throws
  public static func == (a: Metalitix.MTXUserInteractionType, b: Metalitix.MTXUserInteractionType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
extension Metalitix.MTXUserInteractionType : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
extension os.OSLog {
  public static let appDebug: os.OSLog
}
public struct MTXUserEvent : Swift.Codable {
  public init(sessionId: Swift.String?, eventType: Metalitix.MTXUserInteractionType, target: CoreFoundation.CGPoint, points: [CoreFoundation.CGPoint])
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
@_hasMissingDesignatedInitializers @objc public class SceneKitSceneHandle : ObjectiveC.NSObject {
  @objc deinit
}
extension Metalitix.SceneKitSceneHandle : SceneKit.SCNSceneRendererDelegate {
  @objc dynamic public func renderer(_ renderer: any SceneKit.SCNSceneRenderer, didRenderScene scene: SceneKit.SCNScene, atTime time: Foundation.TimeInterval)
}
extension Metalitix.MTXUserInteractionType : Swift.Equatable {}
extension Metalitix.MTXUserInteractionType : Swift.Hashable {}
